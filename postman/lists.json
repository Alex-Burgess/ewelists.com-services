{
	"info": {
		"_postman_id": "87988cfe-109f-4689-a8cd-66711e712201",
		"name": "Lists",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create single list",
			"item": [
				{
					"name": "create",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"Add variable for new List ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    listId = jsonData[\"listId\"];",
									"    pm.environment.set(\"list_id\", listId);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var listId = jsonData['listId'];",
									"    pm.expect(listId.length).to.eql(36);",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql('List was created.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"My Birthday List\",\n    \"description\": \"A gift wish list for my birthday.\",\n    \"eventDate\": \"20 December 2020\",\n    \"occasion\": \"Birthday\",\n    \"imageUrl\": \"/images/celebration-default.jpg\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "lists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A user object should exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    // pm.expect(jsonData['user']['name']).to.eql(\"Api User\");",
									"    pm.expect(jsonData['user']['email']).to.eql(\"eweuser8@gmail.com\");",
									"});",
									"",
									"pm.test(\"The user should own 1 lists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['owned'].length).to.eql(1);",
									"});",
									"",
									"pm.test(\"The user should have 0 lists shared with them\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['shared'].length).to.eql(0);",
									"});",
									"",
									"pm.test(\"The returned object should contain the correct list details\", function () {",
									"    var jsonData = pm.response.json();",
									"    var owned_lists = jsonData['owned'];",
									"    pm.expect(owned_lists[0].listId.length).to.eql(36);",
									"    pm.expect(owned_lists[0].title).to.eql(\"My Birthday List\");",
									"    pm.expect(owned_lists[0].description).to.eql(\"A gift wish list for my birthday.\");",
									"    pm.expect(owned_lists[0].occasion).to.eql(\"Birthday\");",
									"    pm.expect(owned_lists[0].imageUrl).to.eql(\"/images/celebration-default.jpg\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb81bbcd-559a-430f-9b5a-0ef955261e1c",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Expected list details were not correct.\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.list.listId.length).to.eql(36);",
									"    pm.expect(list_obj.list.title).to.eql(\"My Birthday List\");",
									"    pm.expect(list_obj.list.description).to.eql(\"A gift wish list for my birthday.\");",
									"    pm.expect(list_obj.list.eventDate).to.eql(\"20 December 2020\");",
									"    pm.expect(list_obj.list.occasion).to.eql(\"Birthday\");",
									"    pm.expect(list_obj.list.imageUrl).to.eql(\"/images/celebration-default.jpg\");",
									"});",
									"",
									"pm.test(\"Expected producted details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var product_keys = Object.keys(list_obj.products)",
									"    pm.expect(product_keys.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Expected list of reserved products were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.reserved.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Expected shared users objects was not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var shared_keys = Object.keys(list_obj.shared)",
									"    pm.expect(shared_keys.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c6b1463f-8426-42ea-aeee-c6583fa1ad97",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get shared list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"The returned object should contain the correct list details\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.list.listId.length).to.eql(36);",
									"    pm.expect(list_obj.list.title).to.eql(\"My Birthday List\");",
									"    pm.expect(list_obj.list.description).to.eql(\"A gift wish list for my birthday.\");",
									"    pm.expect(list_obj.list.eventDate).to.eql(\"20 December 2020\");",
									"    pm.expect(list_obj.list.occasion).to.eql(\"Birthday\");",
									"    pm.expect(list_obj.list.imageUrl).to.eql(\"/images/celebration-default.jpg\");",
									"});",
									"",
									"pm.test(\"Expected producted details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var product_keys = Object.keys(list_obj.products)",
									"    pm.expect(product_keys.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Expected reserved products details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var reserved_keys = Object.keys(list_obj.reserved)",
									"    pm.expect(reserved_keys.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6edda888-5b8d-41df-ade2-164d43c93f3d",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/shared",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"shared"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response should confirm deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    var deletedBool = jsonData['deleted'];",
									"    pm.expect(deletedBool).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response should have a delete count\", function () {",
									"    var jsonData = pm.response.json();",
									"    var count = jsonData['count'];",
									"    pm.expect(count).to.eql(2);",
									"});",
									"",
									"pm.test(\"Response message should confirm delete successfull\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.include(\"Deleted all items\");",
									"});",
									"",
									"pm.test(\"Clear environment variable\", function() {",
									"    pm.environment.unset(\"list_id\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b0271be0-88a1-40ec-ac91-fb6f3787534e",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "72004e96-87ea-483c-aad2-1faa8cac62fb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "66ec9718-6d2a-493b-9d29-b9e1f40ba822",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Create multiple lists",
			"item": [
				{
					"name": "create",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"Add variable for new List ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    listId = jsonData[\"listId\"];",
									"    pm.environment.set(\"list_id\", listId);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var listId = jsonData['listId'];",
									"    pm.expect(listId.length).to.eql(36);",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql('List was created.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"My Birthday List\",\n    \"description\": \"A gift wish list for my birthday.\",\n    \"eventDate\": \"20 December 2020\",\n    \"occasion\": \"Birthday\",\n    \"imageUrl\": \"/images/celebration-default.jpg\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "create 2nd list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"Add variable for new List ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    listId = jsonData[\"listId\"];",
									"    pm.environment.set(\"list_id2\", listId);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var listId = jsonData['listId'];",
									"    pm.expect(listId.length).to.eql(36);",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql('List was created.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"My Christmas List\",\n    \"description\": \"A gift wish list for Christmas.\",\n    \"eventDate\": \"25 December 2020\",\n    \"occasion\": \"Christmas\",\n    \"imageUrl\": \"/images/christmas-default.jpg\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "lists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A user object should exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    // pm.expect(jsonData['user']['name']).to.eql(\"Api User\");",
									"    pm.expect(jsonData['user']['email']).to.eql(\"eweuser8@gmail.com\");",
									"});",
									"",
									"pm.test(\"The user should own 2 lists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['owned'].length).to.eql(2);",
									"});",
									"",
									"pm.test(\"The user should have 0 lists shared with them\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['shared'].length).to.eql(0);",
									"});",
									"",
									"pm.test(\"The returned object should contain the correct list details\", function () {",
									"    var jsonData = pm.response.json();",
									"    var owned_lists = jsonData['owned'];",
									"    pm.expect(owned_lists[0].listId.length).to.eql(36);",
									"    pm.expect(owned_lists[1].listId.length).to.eql(36);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response should confirm deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    var deletedBool = jsonData['deleted'];",
									"    pm.expect(deletedBool).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response should have a delete count\", function () {",
									"    var jsonData = pm.response.json();",
									"    var count = jsonData['count'];",
									"    pm.expect(count).to.eql(2);",
									"});",
									"",
									"pm.test(\"Response message should confirm delete successfull\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.include(\"Deleted all items\");",
									"});",
									"",
									"pm.test(\"Clear environment variable\", function() {",
									"    pm.environment.unset(\"list_id\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b0271be0-88a1-40ec-ac91-fb6f3787534e",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "delete 2nd list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response should confirm deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    var deletedBool = jsonData['deleted'];",
									"    pm.expect(deletedBool).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response should have a delete count\", function () {",
									"    var jsonData = pm.response.json();",
									"    var count = jsonData['count'];",
									"    pm.expect(count).to.eql(2);",
									"});",
									"",
									"pm.test(\"Response message should confirm delete successfull\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.include(\"Deleted all items\");",
									"});",
									"",
									"pm.test(\"Clear environment variable\", function() {",
									"    pm.environment.unset(\"list_id2\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b0271be0-88a1-40ec-ac91-fb6f3787534e",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id2}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id2}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "72004e96-87ea-483c-aad2-1faa8cac62fb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "66ec9718-6d2a-493b-9d29-b9e1f40ba822",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Edit list details",
			"item": [
				{
					"name": "create",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"Add variable for new List ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    listId = jsonData[\"listId\"];",
									"    pm.environment.set(\"list_id\", listId);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var listId = jsonData['listId'];",
									"    pm.expect(listId.length).to.eql(36);",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql('List was created.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"My Birthday List\",\n    \"description\": \"A gift wish list for my birthday.\",\n    \"eventDate\": \"20 December 2020\",\n    \"occasion\": \"Birthday\",\n    \"imageUrl\": \"/images/celebration-default.jpg\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "update only title",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"The returned object should contain the correct number of updated items\", function () {",
									"    var jsonData = pm.response.json();",
									"    var keys = Object.keys(jsonData)",
									"    pm.expect(keys.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"Check that returned attributes contain the values we expect\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData[0]['updates']['occasion']).to.eql(\"Birthday\");",
									"    pm.expect(jsonData[0]['updates']['description']).to.eql(\"A gift wish list for my birthday.\");",
									"    pm.expect(jsonData[0]['updates']['title']).to.eql(\"My Updated Title\");",
									"    pm.expect(jsonData[0]['updates']['eventDate']).to.eql(\"20 December 2020\");",
									"    pm.expect(jsonData[0]['updates']['imageUrl']).to.eql(\"/images/celebration-default.jpg\");",
									"    pm.expect(jsonData[1]['updates']['occasion']).to.eql(\"Birthday\");",
									"    pm.expect(jsonData[1]['updates']['description']).to.eql(\"A gift wish list for my birthday.\");",
									"    pm.expect(jsonData[1]['updates']['title']).to.eql(\"My Updated Title\");",
									"    pm.expect(jsonData[1]['updates']['eventDate']).to.eql(\"20 December 2020\");",
									"    pm.expect(jsonData[1]['updates']['imageUrl']).to.eql(\"/images/celebration-default.jpg\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6edda888-5b8d-41df-ade2-164d43c93f3d",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"My Updated Title\",\n    \"description\": \"A gift wish list for my birthday.\",\n    \"eventDate\": \"20 December 2020\",\n    \"occasion\": \"Birthday\",\n    \"imageUrl\": \"/images/celebration-default.jpg\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							],
							"query": [
								{
									"key": "attribute_name",
									"value": "title",
									"disabled": true
								},
								{
									"key": "attribute_value",
									"value": "My new title",
									"disabled": true
								}
							]
						},
						"description": "Update list with an attribute"
					},
					"response": []
				},
				{
					"name": "update all attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"The returned object should contain the correct number of updated items\", function () {",
									"    var jsonData = pm.response.json();",
									"    var keys = Object.keys(jsonData)",
									"    pm.expect(keys.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"Check that returned attributes contain the values we expect\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData[0]['updates']['occasion']).to.eql(\"Christmas\");",
									"    pm.expect(jsonData[0]['updates']['description']).to.eql(\"Updated description for the list.\");",
									"    pm.expect(jsonData[0]['updates']['title']).to.eql(\"My Updated Title2\");",
									"    pm.expect(jsonData[0]['updates']['eventDate']).to.eql(\"31 October 2019\");",
									"    pm.expect(jsonData[0]['updates']['imageUrl']).to.eql(\"/images/christmas-default.jpg\");",
									"    pm.expect(jsonData[1]['updates']['occasion']).to.eql(\"Christmas\");",
									"    pm.expect(jsonData[1]['updates']['description']).to.eql(\"Updated description for the list.\");",
									"    pm.expect(jsonData[1]['updates']['eventDate']).to.eql(\"31 October 2019\");",
									"    pm.expect(jsonData[1]['updates']['imageUrl']).to.eql(\"/images/christmas-default.jpg\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6edda888-5b8d-41df-ade2-164d43c93f3d",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"My Updated Title2\",\n    \"description\": \"Updated description for the list.\",\n    \"eventDate\": \"31 October 2019\",\n    \"occasion\": \"Christmas\",\n    \"imageUrl\": \"/images/christmas-default.jpg\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							],
							"query": [
								{
									"key": "attribute_name",
									"value": "title",
									"disabled": true
								},
								{
									"key": "attribute_value",
									"value": "My new title",
									"disabled": true
								}
							]
						},
						"description": "Update list with an attribute"
					},
					"response": []
				},
				{
					"name": "remove date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"The returned object should contain the correct number of updated items\", function () {",
									"    var jsonData = pm.response.json();",
									"    var keys = Object.keys(jsonData)",
									"    pm.expect(keys.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"Check that returned attributes contain the values we expect\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData[0]['updates']['occasion']).to.eql(\"Christmas\");",
									"    pm.expect(jsonData[0]['updates']['description']).to.eql(\"Updated description for the list.\");",
									"    pm.expect(jsonData[0]['updates']['title']).to.eql(\"My Updated Title2\");",
									"    pm.expect(jsonData[0]['updates']['eventDate']).to.eql(\"None\");",
									"    pm.expect(jsonData[0]['updates']['imageUrl']).to.eql(\"/images/christmas-default.jpg\");",
									"    pm.expect(jsonData[1]['updates']['occasion']).to.eql(\"Christmas\");",
									"    pm.expect(jsonData[1]['updates']['description']).to.eql(\"Updated description for the list.\");",
									"    pm.expect(jsonData[1]['updates']['eventDate']).to.eql(\"None\");",
									"    pm.expect(jsonData[1]['updates']['imageUrl']).to.eql(\"/images/christmas-default.jpg\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6edda888-5b8d-41df-ade2-164d43c93f3d",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"My Updated Title2\",\n    \"description\": \"Updated description for the list.\",\n    \"eventDate\": \"\",\n    \"occasion\": \"Christmas\",\n    \"imageUrl\": \"/images/christmas-default.jpg\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							],
							"query": [
								{
									"key": "attribute_name",
									"value": "title",
									"disabled": true
								},
								{
									"key": "attribute_value",
									"value": "My new title",
									"disabled": true
								}
							]
						},
						"description": "Update list with an attribute"
					},
					"response": []
				},
				{
					"name": "delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response should confirm deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    var deletedBool = jsonData['deleted'];",
									"    pm.expect(deletedBool).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response should have a delete count\", function () {",
									"    var jsonData = pm.response.json();",
									"    var count = jsonData['count'];",
									"    pm.expect(count).to.eql(2);",
									"});",
									"",
									"pm.test(\"Response message should confirm delete successfull\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.include(\"Deleted all items\");",
									"});",
									"",
									"pm.test(\"Clear environment variable\", function() {",
									"    pm.environment.unset(\"list_id\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b0271be0-88a1-40ec-ac91-fb6f3787534e",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "72004e96-87ea-483c-aad2-1faa8cac62fb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "66ec9718-6d2a-493b-9d29-b9e1f40ba822",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Add, Update, Remove products from list",
			"item": [
				{
					"name": "create list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"Add variable for new List ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    listId = jsonData[\"listId\"];",
									"    pm.environment.set(\"list_id\", listId);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var listId = jsonData['listId'];",
									"    pm.expect(listId.length).to.eql(36);",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql('List was created.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"My Birthday List\",\n    \"description\": \"A gift wish list for my birthday.\",\n    \"eventDate\": \"20 December 2020\",\n    \"occasion\": \"Birthday\",\n    \"imageUrl\": \"/images/celebration-default.jpg\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"Add variable for new Product ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    productId = jsonData[\"productId\"];",
									"    pm.environment.set(\"p_product_id\", productId);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var productId = jsonData['productId'];",
									"    pm.expect(productId.length).to.eql(36);",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"retailer\": \"amazon\",\n    \"brand\": \"BABYBJÖRN\",\n    \"details\": \"Travel Cot Easy Go, Anthracite, with transport bag\",\n    \"productUrl\": \"https://www.amazon.co.uk/dp/B01H24LM58\",\n    \"imageUrl\": \"https://images-na.ssl-images-amazon.com/images/I/81qYpf1Sm2L._SX679_.jpg\"\n}"
						},
						"url": {
							"raw": "https://{{products_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/products",
							"protocol": "https",
							"host": [
								"{{products_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"products"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "add product to list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 1,\n    \"productType\": \"products\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/product/{{p_product_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"product",
								"{{p_product_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb81bbcd-559a-430f-9b5a-0ef955261e1c",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Expected list details were not correct.\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.list.listId.length).to.eql(36);",
									"    pm.expect(list_obj.list.title).to.eql(\"My Birthday List\");",
									"    pm.expect(list_obj.list.description).to.eql(\"A gift wish list for my birthday.\");",
									"    pm.expect(list_obj.list.eventDate).to.eql(\"20 December 2020\");",
									"    pm.expect(list_obj.list.occasion).to.eql(\"Birthday\");",
									"    pm.expect(list_obj.list.imageUrl).to.eql(\"/images/celebration-default.jpg\");",
									"});",
									"",
									"pm.test(\"Expected producted details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var product_keys = Object.keys(list_obj.products)",
									"    pm.expect(product_keys.length).to.eql(1);",
									"    ",
									"    var product = list_obj.products[product_keys[0]]",
									"    pm.expect(product.type).to.eql(\"products\");",
									"    pm.expect(product.productId.length).to.eql(36);",
									"    pm.expect(product.quantity).to.eql(1);",
									"    pm.expect(product.reserved).to.eql(0);",
									"});",
									"",
									"pm.test(\"Expected list of reserved products were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.reserved.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Expected shared users objects was not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var shared_keys = Object.keys(list_obj.shared)",
									"    pm.expect(shared_keys.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c6b1463f-8426-42ea-aeee-c6583fa1ad97",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "update product added to list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var quantity = jsonData['quantity'];",
									"    pm.expect(quantity).to.eql(2);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 2\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/product/{{p_product_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"product",
								"{{p_product_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb81bbcd-559a-430f-9b5a-0ef955261e1c",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Expected list details were not correct.\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.list.listId.length).to.eql(36);",
									"    pm.expect(list_obj.list.title).to.eql(\"My Birthday List\");",
									"    pm.expect(list_obj.list.description).to.eql(\"A gift wish list for my birthday.\");",
									"    pm.expect(list_obj.list.eventDate).to.eql(\"20 December 2020\");",
									"    pm.expect(list_obj.list.occasion).to.eql(\"Birthday\");",
									"    pm.expect(list_obj.list.imageUrl).to.eql(\"/images/celebration-default.jpg\");",
									"});",
									"",
									"pm.test(\"Expected producted details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var product_keys = Object.keys(list_obj.products)",
									"    pm.expect(product_keys.length).to.eql(1);",
									"    ",
									"    var product = list_obj.products[product_keys[0]]",
									"    pm.expect(product.type).to.eql(\"products\");",
									"    pm.expect(product.productId.length).to.eql(36);",
									"    pm.expect(product.quantity).to.eql(2);",
									"    pm.expect(product.reserved).to.eql(0);",
									"});",
									"",
									"pm.test(\"Expected list of reserved products were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.reserved.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Expected shared users objects was not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var shared_keys = Object.keys(list_obj.shared)",
									"    pm.expect(shared_keys.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c6b1463f-8426-42ea-aeee-c6583fa1ad97",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "delete product from list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/product/{{p_product_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"product",
								"{{p_product_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "delete non existent product from list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.error;",
									"     ",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['error'];",
									"    pm.expect(message).to.eql('Product could not be deleted.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/product/112345678-prod-0001-1234-abcdefghijkl",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"product",
								"112345678-prod-0001-1234-abcdefghijkl"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "delete list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response should confirm deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    var deletedBool = jsonData['deleted'];",
									"    pm.expect(deletedBool).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response should have a delete count\", function () {",
									"    var jsonData = pm.response.json();",
									"    var count = jsonData['count'];",
									"    pm.expect(count).to.eql(2);",
									"});",
									"",
									"pm.test(\"Response message should confirm delete successfull\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.include(\"Deleted all items\");",
									"});",
									"",
									"pm.test(\"Clear environment variable\", function() {",
									"    pm.environment.unset(\"list_id\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b0271be0-88a1-40ec-ac91-fb6f3787534e",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "delete product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response should confirm deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    var deletedBool = jsonData['deleted'];",
									"    pm.expect(deletedBool).to.eql(true);",
									"});",
									"",
									"pm.test(\"Clear environment variable\", function() {",
									"    pm.environment.unset(\"p_product_id\")",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b0271be0-88a1-40ec-ac91-fb6f3787534e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{products_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/products/{{p_product_id}}",
							"protocol": "https",
							"host": [
								"{{products_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"products",
								"{{p_product_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "72004e96-87ea-483c-aad2-1faa8cac62fb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "66ec9718-6d2a-493b-9d29-b9e1f40ba822",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Share list with existing user (not used)",
			"item": [
				{
					"name": "create list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"Add variable for new List ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    listId = jsonData[\"listId\"];",
									"    pm.environment.set(\"list_id\", listId);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var listId = jsonData['listId'];",
									"    pm.expect(listId.length).to.eql(36);",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql('List was created.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"My Birthday List\",\n    \"description\": \"A gift wish list for my birthday.\",\n    \"eventDate\": \"20 December 2020\",\n    \"occasion\": \"Birthday\",\n    \"imageUrl\": \"/images/celebration-default.jpg\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "share list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"Add variable for new Ewe user sub\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"user2_id\", jsonData['user'].userId);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var user = jsonData['user'];",
									"    pm.expect(user['email']).to.eql(\"eweuser8+test2@gmail.com\");",
									"    pm.expect(user['name']).to.eql(\"Ewe Api2\");",
									"    pm.expect(user['userId']).to.eql(\"81efb0af-7d4a-4e8b-b9c3-4211005cb65d\");",
									"    pm.expect(user['type']).to.eql(\"SHARED\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/share/eweuser8%2Btest2%40gmail.com",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"share",
								"eweuser8%2Btest2%40gmail.com"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb81bbcd-559a-430f-9b5a-0ef955261e1c",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Expected list details were not correct.\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.list.listId.length).to.eql(36);",
									"    pm.expect(list_obj.list.title).to.eql(\"My Birthday List\");",
									"    pm.expect(list_obj.list.description).to.eql(\"A gift wish list for my birthday.\");",
									"    pm.expect(list_obj.list.eventDate).to.eql(\"20 December 2020\");",
									"    pm.expect(list_obj.list.occasion).to.eql(\"Birthday\");",
									"    pm.expect(list_obj.list.imageUrl).to.eql(\"/images/celebration-default.jpg\");",
									"});",
									"",
									"pm.test(\"Expected producted details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var product_keys = Object.keys(list_obj.products)",
									"    pm.expect(product_keys.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Expected list of reserved products were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.reserved.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Expected shared users objects was not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var shared_keys = Object.keys(list_obj.shared)",
									"    pm.expect(shared_keys.length).to.eql(1);",
									"    ",
									"    var user = list_obj.shared[shared_keys[0]]",
									"    pm.expect(user.type).to.eql(\"SHARED\");",
									"    pm.expect(user.userId).to.eql(\"81efb0af-7d4a-4e8b-b9c3-4211005cb65d\");",
									"    pm.expect(user.name).to.eql(\"Ewe Api2\");",
									"    pm.expect(user.email).to.eql(\"eweuser8+test2@gmail.com\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c6b1463f-8426-42ea-aeee-c6583fa1ad97",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get shared list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"The returned object should contain the correct list details\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.list.listId.length).to.eql(36);",
									"    pm.expect(list_obj.list.title).to.eql(\"My Birthday List\");",
									"    pm.expect(list_obj.list.description).to.eql(\"A gift wish list for my birthday.\");",
									"    pm.expect(list_obj.list.eventDate).to.eql(\"20 December 2020\");",
									"    pm.expect(list_obj.list.occasion).to.eql(\"Birthday\");",
									"    pm.expect(list_obj.list.imageUrl).to.eql(\"/images/celebration-default.jpg\");",
									"});",
									"",
									"pm.test(\"Expected producted details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var product_keys = Object.keys(list_obj.products)",
									"    pm.expect(product_keys.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Expected reserved products details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var reserved_keys = Object.keys(list_obj.reserved)",
									"    pm.expect(reserved_keys.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6edda888-5b8d-41df-ade2-164d43c93f3d",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey2}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey2}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/shared",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"shared"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "share list already shared",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.error; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['error'];",
									"    pm.expect(message).to.eql('User already exists in list.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/share/eweuser8%2Btest2%40gmail.com",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"share",
								"eweuser8%2Btest2%40gmail.com"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "unshare list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var result = jsonData['unshared'];",
									"    pm.expect(result).to.eql(true);",
									"});",
									"",
									"pm.test(\"Clear environment variable\", function() {",
									"    pm.environment.unset(\"user2_id\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")",
									"pm.environment.get(\"eweuser8_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"share_type\": \"SHARED\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/share/{{user2_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"share",
								"{{user2_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "delete list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response should confirm deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    var deletedBool = jsonData['deleted'];",
									"    pm.expect(deletedBool).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response should have a delete count\", function () {",
									"    var jsonData = pm.response.json();",
									"    var count = jsonData['count'];",
									"    pm.expect(count).to.eql(2);",
									"});",
									"",
									"pm.test(\"Response message should confirm delete successfull\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.include(\"Deleted all items\");",
									"});",
									"",
									"pm.test(\"Clear environment variable\", function() {",
									"    pm.environment.unset(\"list_id\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b0271be0-88a1-40ec-ac91-fb6f3787534e",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "72004e96-87ea-483c-aad2-1faa8cac62fb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "66ec9718-6d2a-493b-9d29-b9e1f40ba822",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Share list with non-existing user (not used)",
			"item": [
				{
					"name": "create list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"Add variable for new List ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    listId = jsonData[\"listId\"];",
									"    pm.environment.set(\"list_id\", listId);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var listId = jsonData['listId'];",
									"    pm.expect(listId.length).to.eql(36);",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql('List was created.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"My Birthday List\",\n    \"description\": \"A gift wish list for my birthday.\",\n    \"eventDate\": \"20 December 2020\",\n    \"occasion\": \"Birthday\",\n    \"imageUrl\": \"/images/celebration-default.jpg\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "share list with user that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var user = jsonData['user'];",
									"    pm.expect(user['email']).to.eql(\"success@simulator.amazonses.com\");",
									"    pm.expect(user['type']).to.eql(\"PENDING\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/share/success%40simulator.amazonses.com",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"share",
								"success%40simulator.amazonses.com"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb81bbcd-559a-430f-9b5a-0ef955261e1c",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Expected list details were not correct.\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.list.listId.length).to.eql(36);",
									"    pm.expect(list_obj.list.title).to.eql(\"My Birthday List\");",
									"    pm.expect(list_obj.list.description).to.eql(\"A gift wish list for my birthday.\");",
									"    pm.expect(list_obj.list.eventDate).to.eql(\"20 December 2020\");",
									"    pm.expect(list_obj.list.occasion).to.eql(\"Birthday\");",
									"    pm.expect(list_obj.list.imageUrl).to.eql(\"/images/celebration-default.jpg\");",
									"});",
									"",
									"pm.test(\"Expected producted details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var product_keys = Object.keys(list_obj.products)",
									"    pm.expect(product_keys.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Expected list of reserved products were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.reserved.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Expected shared users objects was not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var shared_keys = Object.keys(list_obj.shared)",
									"    pm.expect(shared_keys.length).to.eql(1);",
									"    ",
									"    var user = list_obj.shared[shared_keys[0]]",
									"    pm.expect(user.type).to.eql(\"PENDING\");",
									"    pm.expect(user.email).to.eql(\"success@simulator.amazonses.com\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c6b1463f-8426-42ea-aeee-c6583fa1ad97",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "share list already shared",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.error; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['error'];",
									"    pm.expect(message).to.eql('User already exists in list.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/share/success%40simulator.amazonses.com",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"share",
								"success%40simulator.amazonses.com"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "unshare list from pending user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var result = jsonData['unshared'];",
									"    pm.expect(result).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"share_type\": \"PENDING\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/share/success%40simulator.amazonses.com",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"share",
								"success%40simulator.amazonses.com"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "delete list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response should confirm deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    var deletedBool = jsonData['deleted'];",
									"    pm.expect(deletedBool).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response should have a delete count\", function () {",
									"    var jsonData = pm.response.json();",
									"    var count = jsonData['count'];",
									"    pm.expect(count).to.eql(2);",
									"});",
									"",
									"pm.test(\"Response message should confirm delete successfull\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.include(\"Deleted all items\");",
									"});",
									"",
									"pm.test(\"Clear environment variable\", function() {",
									"    pm.environment.unset(\"list_id\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b0271be0-88a1-40ec-ac91-fb6f3787534e",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "72004e96-87ea-483c-aad2-1faa8cac62fb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "66ec9718-6d2a-493b-9d29-b9e1f40ba822",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Reserve, edit and unreserve products (auth)",
			"item": [
				{
					"name": "create list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"Add variable for new List ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    listId = jsonData[\"listId\"];",
									"    pm.environment.set(\"list_id\", listId);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var listId = jsonData['listId'];",
									"    pm.expect(listId.length).to.eql(36);",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql('List was created.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"My Birthday List\",\n    \"description\": \"A gift wish list for my birthday.\",\n    \"eventDate\": \"20 December 2020\",\n    \"occasion\": \"Birthday\",\n    \"imageUrl\": \"/images/celebration-default.jpg\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"Add variable for new Product ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    productId = jsonData[\"productId\"];",
									"    pm.environment.set(\"p_product_id\", productId);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var productId = jsonData['productId'];",
									"    pm.expect(productId.length).to.eql(36);",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"retailer\": \"amazon\",\n    \"brand\": \"BABYBJÖRN\",\n    \"details\": \"Travel Cot Easy Go, Anthracite, with transport bag\",\n    \"productUrl\": \"https://www.amazon.co.uk/dp/B01H24LM58\",\n    \"imageUrl\": \"https://images-na.ssl-images-amazon.com/images/I/81qYpf1Sm2L._SX679_.jpg\"\n}"
						},
						"url": {
							"raw": "https://{{products_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/products",
							"protocol": "https",
							"host": [
								"{{products_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"products"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "add product to list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 2,\n    \"productType\": \"products\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/product/{{p_product_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"product",
								"{{p_product_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb81bbcd-559a-430f-9b5a-0ef955261e1c",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Expected list details were not correct.\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.list.listId.length).to.eql(36);",
									"    pm.expect(list_obj.list.title).to.eql(\"My Birthday List\");",
									"    pm.expect(list_obj.list.description).to.eql(\"A gift wish list for my birthday.\");",
									"    pm.expect(list_obj.list.eventDate).to.eql(\"20 December 2020\");",
									"    pm.expect(list_obj.list.occasion).to.eql(\"Birthday\");",
									"    pm.expect(list_obj.list.imageUrl).to.eql(\"/images/celebration-default.jpg\");",
									"});",
									"",
									"pm.test(\"Expected producted details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var product_keys = Object.keys(list_obj.products)",
									"    pm.expect(product_keys.length).to.eql(1);",
									"    ",
									"    var product = list_obj.products[product_keys[0]]",
									"    pm.expect(product.type).to.eql(\"products\");",
									"    pm.expect(product.productId.length).to.eql(36);",
									"    pm.expect(product.quantity).to.eql(2);",
									"    pm.expect(product.reserved).to.eql(0);",
									"});",
									"",
									"pm.test(\"Expected list of reserved products were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.reserved.length).to.eql(0);",
									"});",
									"",
									"// No longer store who list is shared with.",
									"// pm.test(\"Expected shared users objects was not correct\", function () {",
									"//     var list_obj = pm.response.json();",
									"//     var shared_keys = Object.keys(list_obj.shared)",
									"//     pm.expect(shared_keys.length).to.eql(1);",
									"    ",
									"//     var user = list_obj.shared[shared_keys[0]]",
									"//     pm.expect(user.type).to.eql(\"SHARED\");",
									"//     pm.expect(user.userId).to.eql(\"81efb0af-7d4a-4e8b-b9c3-4211005cb65d\");",
									"//     pm.expect(user.name).to.eql(\"Ewe Api2\");",
									"//     pm.expect(user.email).to.eql(\"eweuser8+test2@gmail.com\");",
									"// });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c6b1463f-8426-42ea-aeee-c6583fa1ad97",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get shared list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"The returned object should contain the correct list details\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.list.listId.length).to.eql(36);",
									"    pm.expect(list_obj.list.title).to.eql(\"My Birthday List\");",
									"    pm.expect(list_obj.list.description).to.eql(\"A gift wish list for my birthday.\");",
									"    pm.expect(list_obj.list.eventDate).to.eql(\"20 December 2020\");",
									"    pm.expect(list_obj.list.occasion).to.eql(\"Birthday\");",
									"    pm.expect(list_obj.list.imageUrl).to.eql(\"/images/celebration-default.jpg\");",
									"});",
									"",
									"pm.test(\"Expected producted details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var product_keys = Object.keys(list_obj.products)",
									"    pm.expect(product_keys.length).to.eql(1);",
									"    ",
									"    var product = list_obj.products[product_keys[0]]",
									"    pm.expect(product.type).to.eql(\"products\");",
									"    pm.expect(product.productId.length).to.eql(36);",
									"    pm.expect(product.quantity).to.eql(2);",
									"    pm.expect(product.reserved).to.eql(0);",
									"});",
									"",
									"pm.test(\"Expected reserved products details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var reserved_keys = Object.keys(list_obj.reserved)",
									"    pm.expect(reserved_keys.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6edda888-5b8d-41df-ade2-164d43c93f3d",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey2}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey2}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/shared",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"shared"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "reserve product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var reserved = jsonData['reserved'];",
									"    pm.expect(reserved).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey2}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey2}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 1\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/reserve/{{p_product_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"reserve",
								"{{p_product_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb81bbcd-559a-430f-9b5a-0ef955261e1c",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Expected list details were not correct.\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.list.listId.length).to.eql(36);",
									"    pm.expect(list_obj.list.title).to.eql(\"My Birthday List\");",
									"    pm.expect(list_obj.list.description).to.eql(\"A gift wish list for my birthday.\");",
									"    pm.expect(list_obj.list.eventDate).to.eql(\"20 December 2020\");",
									"    pm.expect(list_obj.list.occasion).to.eql(\"Birthday\");",
									"    pm.expect(list_obj.list.imageUrl).to.eql(\"/images/celebration-default.jpg\");",
									"});",
									"",
									"pm.test(\"Expected producted details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var product_keys = Object.keys(list_obj.products)",
									"    pm.expect(product_keys.length).to.eql(1);",
									"    ",
									"    var product = list_obj.products[product_keys[0]]",
									"    pm.expect(product.type).to.eql(\"products\");",
									"    pm.expect(product.productId.length).to.eql(36);",
									"    pm.expect(product.quantity).to.eql(2);",
									"    pm.expect(product.reserved).to.eql(1);",
									"});",
									"",
									"pm.test(\"Expected list of reserved products were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.reserved.length).to.eql(1);",
									"    ",
									"    var reserved_product = list_obj.reserved[0]",
									"    pm.expect(reserved_product.name).to.eql(\"Ewe Api2\");",
									"    pm.expect(reserved_product.quantity).to.eql(1);",
									"    pm.expect(reserved_product.productId.length).to.eql(36);",
									"    pm.expect(reserved_product.userId).to.eql(\"81efb0af-7d4a-4e8b-b9c3-4211005cb65d\");",
									"});",
									"",
									"",
									"// No longer store who list is shared with.",
									"// pm.test(\"Expected shared users objects was not correct\", function () {",
									"//     var list_obj = pm.response.json();",
									"//     var shared_keys = Object.keys(list_obj.shared)",
									"//     pm.expect(shared_keys.length).to.eql(1);",
									"    ",
									"//     var user = list_obj.shared[shared_keys[0]]",
									"//     pm.expect(user.type).to.eql(\"SHARED\");",
									"//     pm.expect(user.userId).to.eql(\"81efb0af-7d4a-4e8b-b9c3-4211005cb65d\");",
									"//     pm.expect(user.name).to.eql(\"Ewe Api2\");",
									"//     pm.expect(user.email).to.eql(\"eweuser8+test2@gmail.com\");",
									"// });",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c6b1463f-8426-42ea-aeee-c6583fa1ad97",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get shared list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"The returned object should contain the correct list details\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.list.listId.length).to.eql(36);",
									"    pm.expect(list_obj.list.title).to.eql(\"My Birthday List\");",
									"    pm.expect(list_obj.list.description).to.eql(\"A gift wish list for my birthday.\");",
									"    pm.expect(list_obj.list.eventDate).to.eql(\"20 December 2020\");",
									"    pm.expect(list_obj.list.occasion).to.eql(\"Birthday\");",
									"    pm.expect(list_obj.list.imageUrl).to.eql(\"/images/celebration-default.jpg\");",
									"});",
									"",
									"pm.test(\"Expected producted details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var product_keys = Object.keys(list_obj.products)",
									"    pm.expect(product_keys.length).to.eql(1);",
									"    ",
									"    var product = list_obj.products[product_keys[0]]",
									"    pm.expect(product.type).to.eql(\"products\");",
									"    pm.expect(product.productId.length).to.eql(36);",
									"    pm.expect(product.quantity).to.eql(2);",
									"    pm.expect(product.reserved).to.eql(1);",
									"});",
									"",
									"pm.test(\"Expected reserved products details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var reserved_keys = Object.keys(list_obj.reserved)",
									"    pm.expect(reserved_keys.length).to.eql(1);",
									"    ",
									"    var product_reservation = list_obj.reserved[reserved_keys[0]]",
									"    var user_keys = Object.keys(product_reservation)",
									"    ",
									"    var user_reservation = product_reservation[user_keys[0]]",
									"    pm.expect(user_reservation.name).to.eql(\"Ewe Api2\");",
									"    pm.expect(user_reservation.quantity).to.eql(1);",
									"    pm.expect(user_reservation.productId.length).to.eql(36);",
									"    pm.expect(user_reservation.userId).to.eql(\"81efb0af-7d4a-4e8b-b9c3-4211005cb65d\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6edda888-5b8d-41df-ade2-164d43c93f3d",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey2}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey2}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/shared",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"shared"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "reserve product already reserved",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.error; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['error'];",
									"    pm.expect(message).to.eql('Product already reserved by user.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey2}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey2}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 1\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/reserve/{{p_product_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"reserve",
								"{{p_product_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "update reserved quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var reserved = jsonData['updated'];",
									"    pm.expect(reserved).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey2}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey2}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 2\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/reserve/{{p_product_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"reserve",
								"{{p_product_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "unreserve product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var result = jsonData['unreserved'];",
									"    pm.expect(result).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey2}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey2}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/reserve/{{p_product_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"reserve",
								"{{p_product_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "delete list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response should confirm deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    var deletedBool = jsonData['deleted'];",
									"    pm.expect(deletedBool).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response should have a delete count\", function () {",
									"    var jsonData = pm.response.json();",
									"    var count = jsonData['count'];",
									"    pm.expect(count).to.eql(3);",
									"});",
									"",
									"pm.test(\"Response message should confirm delete successfull\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.include(\"Deleted all items\");",
									"});",
									"",
									"pm.test(\"Clear environment variables\", function() {",
									"    pm.environment.unset(\"list_id\")",
									"    pm.environment.unset(\"user2_id\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b0271be0-88a1-40ec-ac91-fb6f3787534e",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "delete product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response should confirm deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    var deletedBool = jsonData['deleted'];",
									"    pm.expect(deletedBool).to.eql(true);",
									"});",
									"",
									"pm.test(\"Clear environment variable\", function() {",
									"    pm.environment.unset(\"p_product_id\")",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b0271be0-88a1-40ec-ac91-fb6f3787534e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{products_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/products/{{p_product_id}}",
							"protocol": "https",
							"host": [
								"{{products_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"products",
								"{{p_product_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "72004e96-87ea-483c-aad2-1faa8cac62fb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "66ec9718-6d2a-493b-9d29-b9e1f40ba822",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Reserve, edit and unreserve products (no auth)",
			"item": [
				{
					"name": "create list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"Add variable for new List ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    listId = jsonData[\"listId\"];",
									"    pm.environment.set(\"list_id\", listId);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var listId = jsonData['listId'];",
									"    pm.expect(listId.length).to.eql(36);",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql('List was created.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"My Birthday List\",\n    \"description\": \"A gift wish list for my birthday.\",\n    \"eventDate\": \"20 December 2020\",\n    \"occasion\": \"Birthday\",\n    \"imageUrl\": \"/images/celebration-default.jpg\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"Add variable for new Product ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    productId = jsonData[\"productId\"];",
									"    pm.environment.set(\"p_product_id\", productId);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var productId = jsonData['productId'];",
									"    pm.expect(productId.length).to.eql(36);",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql('success');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"retailer\": \"amazon\",\n    \"brand\": \"BABYBJÖRN\",\n    \"details\": \"Travel Cot Easy Go, Anthracite, with transport bag\",\n    \"productUrl\": \"https://www.amazon.co.uk/dp/B01H24LM58\",\n    \"imageUrl\": \"https://images-na.ssl-images-amazon.com/images/I/81qYpf1Sm2L._SX679_.jpg\"\n}"
						},
						"url": {
							"raw": "https://{{products_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/products",
							"protocol": "https",
							"host": [
								"{{products_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"products"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "add product to list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 2,\n    \"productType\": \"products\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/product/{{p_product_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"product",
								"{{p_product_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb81bbcd-559a-430f-9b5a-0ef955261e1c",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Expected list details were not correct.\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.list.listId.length).to.eql(36);",
									"    pm.expect(list_obj.list.title).to.eql(\"My Birthday List\");",
									"    pm.expect(list_obj.list.description).to.eql(\"A gift wish list for my birthday.\");",
									"    pm.expect(list_obj.list.eventDate).to.eql(\"20 December 2020\");",
									"    pm.expect(list_obj.list.occasion).to.eql(\"Birthday\");",
									"    pm.expect(list_obj.list.imageUrl).to.eql(\"/images/celebration-default.jpg\");",
									"});",
									"",
									"pm.test(\"Expected producted details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var product_keys = Object.keys(list_obj.products)",
									"    pm.expect(product_keys.length).to.eql(1);",
									"    ",
									"    var product = list_obj.products[product_keys[0]]",
									"    pm.expect(product.type).to.eql(\"products\");",
									"    pm.expect(product.productId.length).to.eql(36);",
									"    pm.expect(product.quantity).to.eql(2);",
									"    pm.expect(product.reserved).to.eql(0);",
									"});",
									"",
									"pm.test(\"Expected list of reserved products were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.reserved.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Expected shared users objects was not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var shared_keys = Object.keys(list_obj.shared)",
									"    pm.expect(shared_keys.length).to.eql(1);",
									"    ",
									"    var user = list_obj.shared[shared_keys[0]]",
									"    pm.expect(user.type).to.eql(\"SHARED\");",
									"    pm.expect(user.userId).to.eql(\"81efb0af-7d4a-4e8b-b9c3-4211005cb65d\");",
									"    pm.expect(user.name).to.eql(\"Ewe Api2\");",
									"    pm.expect(user.email).to.eql(\"eweuser8+test2@gmail.com\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c6b1463f-8426-42ea-aeee-c6583fa1ad97",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get shared list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"The returned object should contain the correct list details\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.list.listId.length).to.eql(36);",
									"    pm.expect(list_obj.list.title).to.eql(\"My Birthday List\");",
									"    pm.expect(list_obj.list.description).to.eql(\"A gift wish list for my birthday.\");",
									"    pm.expect(list_obj.list.eventDate).to.eql(\"20 December 2020\");",
									"    pm.expect(list_obj.list.occasion).to.eql(\"Birthday\");",
									"    pm.expect(list_obj.list.imageUrl).to.eql(\"/images/celebration-default.jpg\");",
									"});",
									"",
									"pm.test(\"Expected producted details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var product_keys = Object.keys(list_obj.products)",
									"    pm.expect(product_keys.length).to.eql(1);",
									"    ",
									"    var product = list_obj.products[product_keys[0]]",
									"    pm.expect(product.type).to.eql(\"products\");",
									"    pm.expect(product.productId.length).to.eql(36);",
									"    pm.expect(product.quantity).to.eql(2);",
									"    pm.expect(product.reserved).to.eql(0);",
									"});",
									"",
									"pm.test(\"Expected reserved products details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var reserved_keys = Object.keys(list_obj.reserved)",
									"    pm.expect(reserved_keys.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6edda888-5b8d-41df-ade2-164d43c93f3d",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey2}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey2}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/shared",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"shared"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "reserve with user that has account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.error; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['error'];",
									"    pm.expect(message).to.eql('User has an account, login required before product can be reserved.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 1,\n    \"name\": \"Ewe Api2\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/reserve/{{p_product_id}}/email/eweuser8%2Btest2%40gmail.com",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"reserve",
								"{{p_product_id}}",
								"email",
								"eweuser8%2Btest2%40gmail.com"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "reserve product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var reserved = jsonData['reserved'];",
									"    pm.expect(reserved).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 1,\n    \"name\": \"Success Simulator\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/reserve/{{p_product_id}}/email/success%40simulator.amazonses.com",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"reserve",
								"{{p_product_id}}",
								"email",
								"success%40simulator.amazonses.com"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb81bbcd-559a-430f-9b5a-0ef955261e1c",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Expected list details were not correct.\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.list.listId.length).to.eql(36);",
									"    pm.expect(list_obj.list.title).to.eql(\"My Birthday List\");",
									"    pm.expect(list_obj.list.description).to.eql(\"A gift wish list for my birthday.\");",
									"    pm.expect(list_obj.list.eventDate).to.eql(\"20 December 2020\");",
									"    pm.expect(list_obj.list.occasion).to.eql(\"Birthday\");",
									"    pm.expect(list_obj.list.imageUrl).to.eql(\"/images/celebration-default.jpg\");",
									"});",
									"",
									"pm.test(\"Expected producted details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var product_keys = Object.keys(list_obj.products)",
									"    pm.expect(product_keys.length).to.eql(1);",
									"    ",
									"    var product = list_obj.products[product_keys[0]]",
									"    pm.expect(product.type).to.eql(\"products\");",
									"    pm.expect(product.productId.length).to.eql(36);",
									"    pm.expect(product.quantity).to.eql(2);",
									"    pm.expect(product.reserved).to.eql(1);",
									"});",
									"",
									"pm.test(\"Expected list of reserved products were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.reserved.length).to.eql(1);",
									"    ",
									"    var reserved_product = list_obj.reserved[0]",
									"    pm.expect(reserved_product.name).to.eql(\"Success Simulator\");",
									"    pm.expect(reserved_product.quantity).to.eql(1);",
									"    pm.expect(reserved_product.productId.length).to.eql(36);",
									"    pm.expect(reserved_product.userId).to.eql(\"success@simulator.amazonses.com\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c6b1463f-8426-42ea-aeee-c6583fa1ad97",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get shared list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"The returned object should contain the correct list details\", function () {",
									"    var list_obj = pm.response.json();",
									"    pm.expect(list_obj.list.listId.length).to.eql(36);",
									"    pm.expect(list_obj.list.title).to.eql(\"My Birthday List\");",
									"    pm.expect(list_obj.list.description).to.eql(\"A gift wish list for my birthday.\");",
									"    pm.expect(list_obj.list.eventDate).to.eql(\"20 December 2020\");",
									"    pm.expect(list_obj.list.occasion).to.eql(\"Birthday\");",
									"    pm.expect(list_obj.list.imageUrl).to.eql(\"/images/celebration-default.jpg\");",
									"});",
									"",
									"pm.test(\"Expected producted details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var product_keys = Object.keys(list_obj.products)",
									"    pm.expect(product_keys.length).to.eql(1);",
									"    ",
									"    var product = list_obj.products[product_keys[0]]",
									"    pm.expect(product.type).to.eql(\"products\");",
									"    pm.expect(product.productId.length).to.eql(36);",
									"    pm.expect(product.quantity).to.eql(2);",
									"    pm.expect(product.reserved).to.eql(1);",
									"});",
									"",
									"pm.test(\"Expected reserved products details were not correct\", function () {",
									"    var list_obj = pm.response.json();",
									"    var reserved_keys = Object.keys(list_obj.reserved)",
									"    pm.expect(reserved_keys.length).to.eql(1);",
									"    ",
									"    var product_reservation = list_obj.reserved[reserved_keys[0]]",
									"    var user_keys = Object.keys(product_reservation)",
									"    ",
									"    var user_reservation = product_reservation[user_keys[0]]",
									"    pm.expect(user_reservation.name).to.eql(\"Success Simulator\");",
									"    pm.expect(user_reservation.quantity).to.eql(1);",
									"    pm.expect(user_reservation.productId.length).to.eql(36);",
									"    pm.expect(user_reservation.userId).to.eql(\"success@simulator.amazonses.com\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6edda888-5b8d-41df-ade2-164d43c93f3d",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey2}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey2}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/shared",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"shared"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "reserve product already reserved",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.error; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['error'];",
									"    pm.expect(message).to.eql('Product already reserved by user.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 1,\n    \"name\": \"Success Simulator\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/reserve/{{p_product_id}}/email/success%40simulator.amazonses.com",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"reserve",
								"{{p_product_id}}",
								"email",
								"success%40simulator.amazonses.com"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "update reserved quantity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var reserved = jsonData['updated'];",
									"    pm.expect(reserved).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey2}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey2}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 2\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/reserve/{{p_product_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"reserve",
								"{{p_product_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "unreserve product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var result = jsonData['unreserved'];",
									"    pm.expect(result).to.eql(true);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9a43cd30-b909-4d0c-be83-8b7c0b328c72",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey2}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey2}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}/reserve/{{p_product_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}",
								"reserve",
								"{{p_product_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "delete list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response should confirm deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    var deletedBool = jsonData['deleted'];",
									"    pm.expect(deletedBool).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response should have a delete count\", function () {",
									"    var jsonData = pm.response.json();",
									"    var count = jsonData['count'];",
									"    pm.expect(count).to.eql(4);",
									"});",
									"",
									"pm.test(\"Response message should confirm delete successfull\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.include(\"Deleted all items\");",
									"});",
									"",
									"pm.test(\"Clear environment variables\", function() {",
									"    pm.environment.unset(\"list_id\")",
									"    pm.environment.unset(\"user2_id\")",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b0271be0-88a1-40ec-ac91-fb6f3787534e",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "delete product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response should confirm deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    var deletedBool = jsonData['deleted'];",
									"    pm.expect(deletedBool).to.eql(true);",
									"});",
									"",
									"pm.test(\"Clear environment variable\", function() {",
									"    pm.environment.unset(\"p_product_id\")",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b0271be0-88a1-40ec-ac91-fb6f3787534e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{products_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/products/{{p_product_id}}",
							"protocol": "https",
							"host": [
								"{{products_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"products",
								"{{p_product_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "72004e96-87ea-483c-aad2-1faa8cac62fb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "66ec9718-6d2a-493b-9d29-b9e1f40ba822",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "List does not exist tests",
			"item": [
				{
					"name": "create with no body",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.error; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['error'];",
									"    pm.expect(message).to.eql('API Event did not contain a valid body.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "list all for user that has no lists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"The correct number of list objects should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['owned'].length).to.eql(0);",
									"    pm.expect(jsonData['shared'].length).to.eql(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "get list that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.error; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['error'];",
									"    pm.expect(message).to.eql('No query results for List ID 1234abcd and user: c67c2511-f22e-47e0-8709-db4de48de03e.');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6edda888-5b8d-41df-ade2-164d43c93f3d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/1234abcd",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"1234abcd"
							]
						},
						"description": "A request for an item not in the table. Should fail with an appropriate message."
					},
					"response": []
				},
				{
					"name": "delete a list that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.error;",
									"     ",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['error'];",
									"    pm.expect(message).to.eql('No list exists with this ID.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/1234abcd",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"1234abcd"
							]
						},
						"description": "Delete request for an item not in the table.  Should fail with an appropriate message."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Attempt delete list not owned by requestor",
			"item": [
				{
					"name": "create as user 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"Add variable for new List ID\", function() {",
									"    var jsonData = pm.response.json();",
									"    listId = jsonData[\"listId\"];",
									"    pm.environment.set(\"list_id\", listId);",
									"});",
									"",
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"A list Id should be returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    var listId = jsonData['listId'];",
									"    pm.expect(listId.length).to.eql(36);",
									"});",
									"",
									"pm.test(\"Response message should be created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.eql('List was created.');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"My Birthday List\",\n    \"description\": \"A gift wish list for my birthday.\",\n    \"eventDate\": \"20 December 2020\",\n    \"occasion\": \"Birthday\",\n    \"imageUrl\": \"/images/celebration-default.jpg\"\n}"
						},
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists"
							]
						},
						"description": "Create list"
					},
					"response": []
				},
				{
					"name": "delete as user 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     pm.response.to.be.error;",
									"     ",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response message should exist\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['error'];",
									"    pm.expect(message).to.eql(\"Owner of List ID \" + pm.variables.get(\"list_id\") + \" did not match user id of requestor: 81efb0af-7d4a-4e8b-b9c3-4211005cb65d.\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey2}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey2}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Delete request for an item not in the table.  Should fail with an appropriate message."
					},
					"response": []
				},
				{
					"name": "delete list to clean up",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1d15acd-34d8-44e6-9a0d-08ef32565ef8",
								"exec": [
									"pm.test(\"response is ok\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response must be valid and have a body\", function () {",
									"     // assert that the status code is 200",
									"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
									"     // assert that the response has a valid JSON body",
									"     pm.response.to.be.withBody;",
									"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
									"});",
									"",
									"pm.test(\"Response should confirm deleted\", function () {",
									"    var jsonData = pm.response.json();",
									"    var deletedBool = jsonData['deleted'];",
									"    pm.expect(deletedBool).to.eql(true);",
									"});",
									"",
									"pm.test(\"Response should have a delete count\", function () {",
									"    var jsonData = pm.response.json();",
									"    var count = jsonData['count'];",
									"    pm.expect(count).to.eql(2);",
									"});",
									"",
									"pm.test(\"Response message should confirm delete successfull\", function () {",
									"    var jsonData = pm.response.json();",
									"    var message = jsonData['message'];",
									"    pm.expect(message).to.include(\"Deleted all items\");",
									"});",
									"",
									"pm.test(\"Clear environment variable\", function() {",
									"    pm.environment.unset(\"list_id\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b0271be0-88a1-40ec-ac91-fb6f3787534e",
								"exec": [
									"pm.environment.get(\"list_id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": [
								{
									"key": "secretKey",
									"value": "{{SecretKey}}",
									"type": "string"
								},
								{
									"key": "accessKey",
									"value": "{{AccessKey}}",
									"type": "string"
								},
								{
									"key": "service",
									"value": "",
									"type": "string"
								},
								{
									"key": "region",
									"value": "eu-west-1",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{lists_url_id}}.execute-api.eu-west-1.amazonaws.com/{{env}}/lists/{{list_id}}",
							"protocol": "https",
							"host": [
								"{{lists_url_id}}",
								"execute-api",
								"eu-west-1",
								"amazonaws",
								"com"
							],
							"path": [
								"{{env}}",
								"lists",
								"{{list_id}}"
							]
						},
						"description": "Create list"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f796bdb8-c000-4284-acf9-5483f69332ee",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "842d9150-4b84-46f4-b8d0-6025b64db534",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}