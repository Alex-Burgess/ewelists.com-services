AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  Prod:
    Fn::Equals:
    - Ref: Environment
    - prod
  Staging:
    Fn::Equals:
    - Ref: Environment
    - staging
Description: Serverless resources for lists service
Globals:
  Function:
    Timeout: 3
Outputs:
  ApiId:
    Description: ID for the API
    Value:
      Ref: Api
  ApiUrl:
    Description: API Gateway endpoint URL for stage of Service
    Value:
      Fn::Sub: https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/${ServiceName}/
  CreateListFunctionName:
    Description: Create List Function Name
    Value:
      Ref: CreateListFunction
  FunctionIamRole:
    Description: Implicit IAM Role created for function
    Value:
      Fn::GetAtt:
      - FunctionRole
      - Arn
Parameters:
  DomainName:
    AllowedPattern: ^[a-z0-9-]*.com$
    ConstraintDescription: Must be a web domain, ending in .com. Can include lower
      case letters, numbers and hypens.
    Default: ewelists.com
    Description: Domain name for your website (example.com)
    Type: String
  Environment:
    AllowedValues:
    - prod
    - staging
    - dev
    - test
    ConstraintDescription: must specify prod, staging, dev or test.
    Default: test
    Description: Environment type.
    Type: String
  ServiceName:
    Default: lists
    Description: Service name.
    Type: String
  TableNamePrefix:
    Default: lists
    Description: Name of dynamoDB table.
    Type: String
Resources:
  Api:
    Properties:
      DefinitionBody:
        info:
          title:
            Fn::Sub: ${ServiceName}-${Environment}
          version: '1.0'
        paths:
          /lists:
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin:
                        Fn::If:
                        - Prod
                        - Fn::Sub: '''https://${DomainName}'''
                        - Fn::If:
                          - Staging
                          - Fn::Sub: '''https://${Environment}.${DomainName}'''
                          - '''*'''
                    responseTemplates:
                      application/json: '{}

                        '
                    statusCode: '200'
                type: mock
            post:
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateListFunction.Arn}/invocations
        schemes:
        - https
        securityDefinitions:
          sigv4:
            in: header
            name: Authorization
            type: apiKey
            x-amazon-apigateway-authtype: awsSigv4
        swagger: '2.0'
      MethodSettings:
      - DataTraceEnabled: true
        HttpMethod: '*'
        LoggingLevel: INFO
        MetricsEnabled: false
        ResourcePath: /*
      StageName:
        Ref: Environment
    Type: AWS::Serverless::Api
  CreateListFunction:
    Properties:
      CodeUri: s3://sam-builds-lists/05eb6aaea5c923ec98b854c4dcec96d2
      Description: Creates list items in table
      Environment:
        Variables:
          TABLE_NAME:
            Fn::Sub: ${TableNamePrefix}-${Environment}
      Events:
        CreateList:
          Properties:
            Method: POST
            Path: /lists
            RestApiId:
              Ref: Api
          Type: Api
      FunctionName:
        Fn::Sub: ${ServiceName}-${Environment}
      Handler: lists/create.handler
      MemorySize: 512
      Role:
        Fn::GetAtt:
        - FunctionRole
        - Arn
      Runtime: python3.6
      Timeout: 3
    Type: AWS::Serverless::Function
  Default400GatewayResponse:
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
        gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
      ResponseType: DEFAULT_4XX
      RestApiId:
        Ref: Api
    Type: AWS::ApiGateway::GatewayResponse
  Default500GatewayResponse:
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Headers: '''*'''
        gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
      ResponseType: DEFAULT_5XX
      RestApiId:
        Ref: Api
    Type: AWS::ApiGateway::GatewayResponse
  FunctionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:UpdateItem
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:DeleteItem
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: ListsPolicy
      RoleName:
        Fn::Sub: ${ServiceName}-${Environment}-Role
    Type: AWS::IAM::Role
Transform: AWS::Serverless-2016-10-31
