AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless resources for lists service

Globals:
    Function:
        Timeout: 3

Parameters:
  Environment:
    Description: Environment type.
    Default: test
    Type: String
    AllowedValues:
      - prod
      - staging
      - dev
      - test
    ConstraintDescription: must specify prod, staging, dev or test.
  ServiceName:
    Description: Service name.
    Default: lists
    Type: String
  TableNamePrefix:
    Description: Name of dynamoDB table.
    Default: lists
    Type: String
  DomainName:
    Description: Domain name for your website (example.com)
    Type: String
    AllowedPattern: "^[a-z0-9-]*.com$"
    ConstraintDescription: Must be a web domain, ending in .com. Can include lower case letters, numbers and hypens.
    Default: ewelists.com

Conditions:
  Staging: !Equals [ !Ref Environment, staging ]
  Prod: !Equals [ !Ref Environment, prod ]


Resources:
  CreateListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-createlist-${Environment}'
      Handler: lists/create.handler
      Runtime: python3.6
      MemorySize: 512
      Timeout: 3
      Description: Creates list items in table
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Sub '${TableNamePrefix}-${Environment}'
          POSTMAN_USERPOOL_SUB: "c67c2511-f22e-47e0-8709-db4de48de03e"
          POSTMAN_USERPOOL_SUB2: "81efb0af-7d4a-4e8b-b9c3-4211005cb65d"
      Events:
        CreateList:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /lists
            Method: POST

  ListAllFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-listall-${Environment}'
      Handler: lists/list.handler
      Runtime: python3.6
      MemorySize: 512
      Timeout: 3
      Description: Gets all list items for a user in the table
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Sub '${TableNamePrefix}-${Environment}'
          INDEX_NAME: "userId-index"
          POSTMAN_USERPOOL_SUB: "c67c2511-f22e-47e0-8709-db4de48de03e"
          POSTMAN_USERPOOL_SUB2: "81efb0af-7d4a-4e8b-b9c3-4211005cb65d"
      Events:
        ListAll:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /lists
            Method: GET

  GetListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-getlist-${Environment}'
      Handler: lists/get_list.handler
      Runtime: python3.6
      MemorySize: 512
      Timeout: 3
      Description: Gets a list item for a user in the table
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Sub '${TableNamePrefix}-${Environment}'
          POSTMAN_USERPOOL_SUB: "c67c2511-f22e-47e0-8709-db4de48de03e"
          POSTMAN_USERPOOL_SUB2: "81efb0af-7d4a-4e8b-b9c3-4211005cb65d"
      Events:
        GetList:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /lists/{id}
            Method: GET

  GetSharedListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-getsharedlist-${Environment}'
      Handler: lists/get_shared_list.handler
      Runtime: python3.6
      MemorySize: 512
      Timeout: 3
      Description: Gets a list item that was shared with a user
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Sub '${TableNamePrefix}-${Environment}'
          POSTMAN_USERPOOL_SUB: "c67c2511-f22e-47e0-8709-db4de48de03e"
          POSTMAN_USERPOOL_SUB2: "81efb0af-7d4a-4e8b-b9c3-4211005cb65d"
      Events:
        GetSharedList:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /lists/{id}/shared
            Method: GET

  UpdateListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-updatelist-${Environment}'
      Handler: lists/update.handler
      Runtime: python3.6
      MemorySize: 512
      Timeout: 3
      Description: Updates a list item for a user in the table
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Sub '${TableNamePrefix}-${Environment}'
          POSTMAN_USERPOOL_SUB: "c67c2511-f22e-47e0-8709-db4de48de03e"
          POSTMAN_USERPOOL_SUB2: "81efb0af-7d4a-4e8b-b9c3-4211005cb65d"
      Events:
        UpdateList:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /lists/{id}
            Method: PUT

  DeleteListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-delete-${Environment}'
      Handler: lists/delete.handler
      Runtime: python3.6
      MemorySize: 512
      Timeout: 3
      Description: Deletes a list item for a given user in the table
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Sub '${TableNamePrefix}-${Environment}'
          POSTMAN_USERPOOL_SUB: "c67c2511-f22e-47e0-8709-db4de48de03e"
          POSTMAN_USERPOOL_SUB2: "81efb0af-7d4a-4e8b-b9c3-4211005cb65d"
      Events:
        CreateList:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /lists/{id}
            Method: DELETE

  AddProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-addproduct-${Environment}'
      Handler: lists/add_product.handler
      Runtime: python3.6
      MemorySize: 512
      Timeout: 3
      Description: Adds a product to the list.
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Sub '${TableNamePrefix}-${Environment}'
          POSTMAN_USERPOOL_SUB: "c67c2511-f22e-47e0-8709-db4de48de03e"
          POSTMAN_USERPOOL_SUB2: "81efb0af-7d4a-4e8b-b9c3-4211005cb65d"
      Events:
        CreateList:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /lists/{id}/product/{productId}
            Method: POST

  DeleteProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-deleteproduct-${Environment}'
      Handler: lists/delete_product.handler
      Runtime: python3.6
      MemorySize: 512
      Timeout: 3
      Description: Adds a product to the list.
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Sub '${TableNamePrefix}-${Environment}'
          POSTMAN_USERPOOL_SUB: "c67c2511-f22e-47e0-8709-db4de48de03e"
          POSTMAN_USERPOOL_SUB2: "81efb0af-7d4a-4e8b-b9c3-4211005cb65d"
      Events:
        CreateList:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /lists/{id}/product/{productId}
            Method: DELETE

  UpdateProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-updateproduct-${Environment}'
      Handler: lists/update_product.handler
      Runtime: python3.6
      MemorySize: 512
      Timeout: 3
      Description: Updates a product that is added to a list.
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Sub '${TableNamePrefix}-${Environment}'
          POSTMAN_USERPOOL_SUB: "c67c2511-f22e-47e0-8709-db4de48de03e"
          POSTMAN_USERPOOL_SUB2: "81efb0af-7d4a-4e8b-b9c3-4211005cb65d"
      Events:
        CreateList:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /lists/{id}/product/{productId}
            Method: PUT

  SignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-signup-${Environment}'
      Handler: lists/signup.handler
      Runtime: python3.6
      MemorySize: 512
      Timeout: 3
      Description: Creates a user in the lists table.
      Role: !GetAtt SignUpFunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Sub '${TableNamePrefix}-${Environment}'
          INDEX_NAME: "SK-index"
          USERPOOL_ID: !Sub '{{resolve:ssm:/CognitoUserPoolId/${Environment}:1}}'
          POSTMAN_USERPOOL_SUB: "c67c2511-f22e-47e0-8709-db4de48de03e"
          POSTMAN_USERPOOL_SUB2: "81efb0af-7d4a-4e8b-b9c3-4211005cb65d"
          TEMPLATE_NAME: !Sub 'Welcome-${Environment}'

  ReserveProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-reserveproduct-${Environment}'
      Handler: lists/reserve.handler
      Runtime: python3.6
      MemorySize: 512
      Timeout: 3
      Description: Reserves a product that is added to a list.
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Sub '${TableNamePrefix}-${Environment}'
          POSTMAN_USERPOOL_SUB: "c67c2511-f22e-47e0-8709-db4de48de03e"
          POSTMAN_USERPOOL_SUB2: "81efb0af-7d4a-4e8b-b9c3-4211005cb65d"
      Events:
        CreateList:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /lists/{id}/reserve/{productId}
            Method: POST

  UnreserveProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-unreserveproduct-${Environment}'
      Handler: lists/unreserve.handler
      Runtime: python3.6
      MemorySize: 512
      Timeout: 3
      Description: Reserves a product that is added to a list.
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Sub '${TableNamePrefix}-${Environment}'
          POSTMAN_USERPOOL_SUB: "c67c2511-f22e-47e0-8709-db4de48de03e"
          POSTMAN_USERPOOL_SUB2: "81efb0af-7d4a-4e8b-b9c3-4211005cb65d"
      Events:
        CreateList:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /lists/{id}/reserve/{productId}
            Method: DELETE

  UpdateProductReservationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-updateproductreservation-${Environment}'
      Handler: lists/update_reservation.handler
      Runtime: python3.6
      MemorySize: 512
      Timeout: 3
      Description: Updates the quantity of a product reservation.
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Sub '${TableNamePrefix}-${Environment}'
          POSTMAN_USERPOOL_SUB: "c67c2511-f22e-47e0-8709-db4de48de03e"
          POSTMAN_USERPOOL_SUB2: "81efb0af-7d4a-4e8b-b9c3-4211005cb65d"
      Events:
        CreateList:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /lists/{id}/reserve/{productId}
            Method: PUT

  ShareListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-sharelist-${Environment}'
      Handler: lists/share.handler
      Runtime: python3.6
      MemorySize: 512
      Timeout: 3
      Description: Shares a list with a user.
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Sub '${TableNamePrefix}-${Environment}'
          INDEX_NAME: "email-index"
          POSTMAN_USERPOOL_SUB: "c67c2511-f22e-47e0-8709-db4de48de03e"
          POSTMAN_USERPOOL_SUB2: "81efb0af-7d4a-4e8b-b9c3-4211005cb65d"
      Events:
        CreateList:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /lists/{id}/share/{user}
            Method: POST

  UnshareListFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ServiceName}-unshare-${Environment}'
      Handler: lists/unshare.handler
      Runtime: python3.6
      MemorySize: 512
      Timeout: 3
      Description: Unshares a list with a user.
      Role: !GetAtt FunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Sub '${TableNamePrefix}-${Environment}'
          POSTMAN_USERPOOL_SUB: "c67c2511-f22e-47e0-8709-db4de48de03e"
          POSTMAN_USERPOOL_SUB2: "81efb0af-7d4a-4e8b-b9c3-4211005cb65d"
      Events:
        CreateList:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /lists/{id}/share/{user}
            Method: DELETE

  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ServiceName}-${Environment}-Api-Role'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: ListsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:DeleteItem'
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableNamePrefix}-${Environment}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableNamePrefix}-${Environment}/*"
        - PolicyName: EmailPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ses:SendEmail'
                Resource:
                  # - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/contact@ewelists.com"
                  - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*"

  SignUpFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ServiceName}-${Environment}-Signup-Role'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: CognitoPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cognito-idp:*'
                Resource: '*'
        - PolicyName: ListsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:DeleteItem'
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableNamePrefix}-${Environment}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableNamePrefix}-${Environment}/*"
        - PolicyName: EmailPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ses:SendTemplatedEmail'
                Resource:
                  - !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/*"

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: "*"
          LoggingLevel: INFO
          ResourcePath: "/*"
          MetricsEnabled: false
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0"
          title: !Sub '${ServiceName}-${Environment}'
        schemes:
        - "https"
        paths:
          "/lists":
            post:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateListFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListAllFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [Prod, !Sub "'https://${DomainName}'",
                                                                            !If [Staging, !Sub "'https://${Environment}.${DomainName}'", "'*'"]
                                                                          ]
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
                type: "mock"
          "/lists/{id}":
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetListFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            put:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateListFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            delete:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteListFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,DELETE,PUT,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [Prod, !Sub "'https://${DomainName}'",
                                                                            !If [Staging, !Sub "'https://${Environment}.${DomainName}'", "'*'"]
                                                                          ]
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
                type: "mock"
          "/lists/{id}/shared":
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSharedListFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [Prod, !Sub "'https://${DomainName}'",
                                                                            !If [Staging, !Sub "'https://${Environment}.${DomainName}'", "'*'"]
                                                                          ]
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
                type: "mock"
          "/lists/{id}/product/{productid}":
            post:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddProductFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            put:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateProductFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            delete:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteProductFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,PUT,DELETE,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [Prod, !Sub "'https://${DomainName}'",
                                                                            !If [Staging, !Sub "'https://${Environment}.${DomainName}'", "'*'"]
                                                                          ]
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
                type: "mock"
          "/lists/{id}/reserve/{productid}":
            post:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReserveProductFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            put:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateProductReservationFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            delete:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UnreserveProductFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,PUT,DELETE,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [Prod, !Sub "'https://${DomainName}'",
                                                                            !If [Staging, !Sub "'https://${Environment}.${DomainName}'", "'*'"]
                                                                          ]
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
                type: "mock"
          "/lists/{id}/share/{user}":
            post:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ShareListFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            delete:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UnshareListFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,DELETE,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: !If [Prod, !Sub "'https://${DomainName}'",
                                                                            !If [Staging, !Sub "'https://${Environment}.${DomainName}'", "'*'"]
                                                                          ]
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
                type: "mock"
        securityDefinitions:
          sigv4:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "awsSigv4"

  Default400GatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
        ResponseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref Api

  Default500GatewayResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
        ResponseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref Api

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL for stage of Service
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/${ServiceName}/'

  ApiId:
    Description: ID for the API
    Value: !Ref Api

  FunctionIamRole:
    Description: Implicit IAM Role created for function
    Value: !GetAtt FunctionRole.Arn
