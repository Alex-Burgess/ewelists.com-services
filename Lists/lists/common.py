# A collection of methods that are common across all modules.
import logging
import re


logger = logging.getLogger()
logger.setLevel(logging.INFO)
if logger.handlers:
    handler = logger.handlers[0]
    handler.setFormatter(logging.Formatter("[%(levelname)s]\t%(asctime)s.%(msecs)dZ\t%(aws_request_id)s\t%(module)s:%(funcName)s\t%(message)s\n", "%Y-%m-%dT%H:%M:%S"))


def get_table_name(env):
    try:
        table_name = env['TABLE_NAME']
        logger.info("TABLE_NAME environment variable value: " + table_name)
    except KeyError:
        logger.error('TABLE_NAME environment variable not set correctly')
        raise Exception('TABLE_NAME environment variable not set correctly')

    return table_name


def get_identity(event, env):
    identity = {}

    try:
        userArn = event['requestContext']['identity']['userArn']
        cognito_identity_id = event['requestContext']['identity']['cognitoIdentityId']
        cognito_authentication_provider = event['requestContext']['identity']['cognitoAuthenticationProvider']
    except KeyError:
        logger.error("There was no identity context in API event.")
        raise Exception("There was no identity context in API event.")

    # Check to see if request was generated by postman, which doesn't authenticate via cognito.
    pattern = re.compile("^arn:aws:iam::[0-9]{12}:user/ApiTestUser")
    if pattern.match(userArn):
        logger.info('Request was from postman, using API test identity.')
        api_identity = get_api_identity(env)
        identity["cognitoIdentityId"] = api_identity["API_IDENTITY_ID"]
        identity["userPoolSub"] = api_identity["API_USERPOOL_SUB"]
    else:
        if cognito_identity_id is None:
            raise Exception("There was no cognitoIdentityId in the API event.")

        identity["cognitoIdentityId"] = cognito_identity_id
        identity["userPoolSub"] = cognito_authentication_provider.split(':')[-1]

        logger.info('cognitoIdentityId was retrieved from event.')

    return identity


def get_api_identity(env):
    api_identity = {}
    try:
        api_identity["API_IDENTITY_ID"] = env['API_IDENTITY_ID']
        api_identity["API_USERPOOL_SUB"] = env['API_USERPOOL_SUB']
    except KeyError:
        logger.error('API_IDENTITY_ID and API_USERPOOL_SUB environment variables not set correctly')
        raise Exception('API_IDENTITY_ID and API_USERPOOL_SUB environment variables not set correctly')

    return api_identity


def get_list_id(event):
    try:
        list_id = event['pathParameters']['id']
        logger.info("List ID: " + list_id)
    except Exception:
        logger.error("API Event did not contain a List ID in the path parameters.")
        raise Exception('API Event did not contain a List ID in the path parameters.')

    return list_id
